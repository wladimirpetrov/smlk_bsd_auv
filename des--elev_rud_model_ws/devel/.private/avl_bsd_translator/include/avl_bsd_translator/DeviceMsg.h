// Generated by gencpp from file avl_bsd_translator/DeviceMsg.msg
// DO NOT EDIT!


#ifndef AVL_BSD_TRANSLATOR_MESSAGE_DEVICEMSG_H
#define AVL_BSD_TRANSLATOR_MESSAGE_DEVICEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace avl_bsd_translator
{
template <class ContainerAllocator>
struct DeviceMsg_
{
  typedef DeviceMsg_<ContainerAllocator> Type;

  DeviceMsg_()
    : DEVICE_NAME()
    , NAMES()
    , TYPES()
    , VALUES()  {
    }
  DeviceMsg_(const ContainerAllocator& _alloc)
    : DEVICE_NAME(_alloc)
    , NAMES(_alloc)
    , TYPES(_alloc)
    , VALUES(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _DEVICE_NAME_type;
  _DEVICE_NAME_type DEVICE_NAME;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _NAMES_type;
  _NAMES_type NAMES;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _TYPES_type;
  _TYPES_type TYPES;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _VALUES_type;
  _VALUES_type VALUES;





  typedef boost::shared_ptr< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceMsg_

typedef ::avl_bsd_translator::DeviceMsg_<std::allocator<void> > DeviceMsg;

typedef boost::shared_ptr< ::avl_bsd_translator::DeviceMsg > DeviceMsgPtr;
typedef boost::shared_ptr< ::avl_bsd_translator::DeviceMsg const> DeviceMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator2> & rhs)
{
  return lhs.DEVICE_NAME == rhs.DEVICE_NAME &&
    lhs.NAMES == rhs.NAMES &&
    lhs.TYPES == rhs.TYPES &&
    lhs.VALUES == rhs.VALUES;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace avl_bsd_translator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac0218f626191d446efaa61422be9692";
  }

  static const char* value(const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac0218f626191d44ULL;
  static const uint64_t static_value2 = 0x6efaa61422be9692ULL;
};

template<class ContainerAllocator>
struct DataType< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "avl_bsd_translator/DeviceMsg";
  }

  static const char* value(const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#===============================================================================\n"
"# Autonomous Vehicle Library Backseat Driver\n"
"#\n"
"# Description: Defines a ROS message that contains a device message\n"
"#===============================================================================\n"
"\n"
"string DEVICE_NAME\n"
"string[] NAMES\n"
"uint8[] TYPES\n"
"string[] VALUES\n"
;
  }

  static const char* value(const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DEVICE_NAME);
      stream.next(m.NAMES);
      stream.next(m.TYPES);
      stream.next(m.VALUES);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::avl_bsd_translator::DeviceMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::avl_bsd_translator::DeviceMsg_<ContainerAllocator>& v)
  {
    s << indent << "DEVICE_NAME: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.DEVICE_NAME);
    s << indent << "NAMES[]" << std::endl;
    for (size_t i = 0; i < v.NAMES.size(); ++i)
    {
      s << indent << "  NAMES[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.NAMES[i]);
    }
    s << indent << "TYPES[]" << std::endl;
    for (size_t i = 0; i < v.TYPES.size(); ++i)
    {
      s << indent << "  TYPES[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.TYPES[i]);
    }
    s << indent << "VALUES[]" << std::endl;
    for (size_t i = 0; i < v.VALUES.size(); ++i)
    {
      s << indent << "  VALUES[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.VALUES[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AVL_BSD_TRANSLATOR_MESSAGE_DEVICEMSG_H
