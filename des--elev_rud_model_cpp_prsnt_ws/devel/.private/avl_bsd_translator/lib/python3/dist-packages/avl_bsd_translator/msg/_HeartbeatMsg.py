# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from avl_bsd_translator/HeartbeatMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HeartbeatMsg(genpy.Message):
  _md5sum = "ac1c7d62091790946cc68f56d9855dd5"
  _type = "avl_bsd_translator/HeartbeatMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#===============================================================================
# Autonomous Vehicle Library Backseat Driver
#
# Description: Defines a ROS message that contains a heartbeat
#===============================================================================


uint8 HEARTBEAT_STATUS
uint8 HEARTBEAT_UMODEM_SYNC
uint8 HEARTBEAT_IRIDIUM_STR

uint8 HEARTBEAT_MISSION_MODE
uint8 HEARTBEAT_FSD_MISSION_STATE
uint8 HEARTBEAT_FSD_CURRENT_ACTION
uint8 HEARTBEAT_FSD_TOTAL_ACTIONS
uint8 HEARTBEAT_BSD_MISSION_STATE
uint8 HEARTBEAT_BSD_CURRENT_ACTION
uint8 HEARTBEAT_BSD_TOTAL_ACTIONS
uint8 HEARTBEAT_GPS_SATS
uint8 HEARTBEAT_NAV_INITIALIZED

float64 HEARTBEAT_ROLL
float64 HEARTBEAT_PITCH
float64 HEARTBEAT_YAW
float64 HEARTBEAT_WX
float64 HEARTBEAT_WY
float64 HEARTBEAT_WZ
float64 HEARTBEAT_AX
float64 HEARTBEAT_AY
float64 HEARTBEAT_AZ
float64 HEARTBEAT_VN
float64 HEARTBEAT_VE
float64 HEARTBEAT_VD
float64 HEARTBEAT_DEPTH
float64 HEARTBEAT_HEIGHT
float64 HEARTBEAT_RPM
float64 HEARTBEAT_VOLTAGE
float64 HEARTBEAT_FSD_ACTION_PERCENT
float64 HEARTBEAT_BSD_ACTION_PERCENT
float64 HEARTBEAT_GPS_LAT
float64 HEARTBEAT_GPS_LON
float64 HEARTBEAT_GPS_ALT
float64 HEARTBEAT_NAV_LAT
float64 HEARTBEAT_NAV_LON
float64 HEARTBEAT_NAV_ALT
float64 HEARTBEAT_NAV_YAW_STD
float64 HEARTBEAT_NAV_AVG_POS_ERR
"""
  __slots__ = ['HEARTBEAT_STATUS','HEARTBEAT_UMODEM_SYNC','HEARTBEAT_IRIDIUM_STR','HEARTBEAT_MISSION_MODE','HEARTBEAT_FSD_MISSION_STATE','HEARTBEAT_FSD_CURRENT_ACTION','HEARTBEAT_FSD_TOTAL_ACTIONS','HEARTBEAT_BSD_MISSION_STATE','HEARTBEAT_BSD_CURRENT_ACTION','HEARTBEAT_BSD_TOTAL_ACTIONS','HEARTBEAT_GPS_SATS','HEARTBEAT_NAV_INITIALIZED','HEARTBEAT_ROLL','HEARTBEAT_PITCH','HEARTBEAT_YAW','HEARTBEAT_WX','HEARTBEAT_WY','HEARTBEAT_WZ','HEARTBEAT_AX','HEARTBEAT_AY','HEARTBEAT_AZ','HEARTBEAT_VN','HEARTBEAT_VE','HEARTBEAT_VD','HEARTBEAT_DEPTH','HEARTBEAT_HEIGHT','HEARTBEAT_RPM','HEARTBEAT_VOLTAGE','HEARTBEAT_FSD_ACTION_PERCENT','HEARTBEAT_BSD_ACTION_PERCENT','HEARTBEAT_GPS_LAT','HEARTBEAT_GPS_LON','HEARTBEAT_GPS_ALT','HEARTBEAT_NAV_LAT','HEARTBEAT_NAV_LON','HEARTBEAT_NAV_ALT','HEARTBEAT_NAV_YAW_STD','HEARTBEAT_NAV_AVG_POS_ERR']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       HEARTBEAT_STATUS,HEARTBEAT_UMODEM_SYNC,HEARTBEAT_IRIDIUM_STR,HEARTBEAT_MISSION_MODE,HEARTBEAT_FSD_MISSION_STATE,HEARTBEAT_FSD_CURRENT_ACTION,HEARTBEAT_FSD_TOTAL_ACTIONS,HEARTBEAT_BSD_MISSION_STATE,HEARTBEAT_BSD_CURRENT_ACTION,HEARTBEAT_BSD_TOTAL_ACTIONS,HEARTBEAT_GPS_SATS,HEARTBEAT_NAV_INITIALIZED,HEARTBEAT_ROLL,HEARTBEAT_PITCH,HEARTBEAT_YAW,HEARTBEAT_WX,HEARTBEAT_WY,HEARTBEAT_WZ,HEARTBEAT_AX,HEARTBEAT_AY,HEARTBEAT_AZ,HEARTBEAT_VN,HEARTBEAT_VE,HEARTBEAT_VD,HEARTBEAT_DEPTH,HEARTBEAT_HEIGHT,HEARTBEAT_RPM,HEARTBEAT_VOLTAGE,HEARTBEAT_FSD_ACTION_PERCENT,HEARTBEAT_BSD_ACTION_PERCENT,HEARTBEAT_GPS_LAT,HEARTBEAT_GPS_LON,HEARTBEAT_GPS_ALT,HEARTBEAT_NAV_LAT,HEARTBEAT_NAV_LON,HEARTBEAT_NAV_ALT,HEARTBEAT_NAV_YAW_STD,HEARTBEAT_NAV_AVG_POS_ERR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HeartbeatMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.HEARTBEAT_STATUS is None:
        self.HEARTBEAT_STATUS = 0
      if self.HEARTBEAT_UMODEM_SYNC is None:
        self.HEARTBEAT_UMODEM_SYNC = 0
      if self.HEARTBEAT_IRIDIUM_STR is None:
        self.HEARTBEAT_IRIDIUM_STR = 0
      if self.HEARTBEAT_MISSION_MODE is None:
        self.HEARTBEAT_MISSION_MODE = 0
      if self.HEARTBEAT_FSD_MISSION_STATE is None:
        self.HEARTBEAT_FSD_MISSION_STATE = 0
      if self.HEARTBEAT_FSD_CURRENT_ACTION is None:
        self.HEARTBEAT_FSD_CURRENT_ACTION = 0
      if self.HEARTBEAT_FSD_TOTAL_ACTIONS is None:
        self.HEARTBEAT_FSD_TOTAL_ACTIONS = 0
      if self.HEARTBEAT_BSD_MISSION_STATE is None:
        self.HEARTBEAT_BSD_MISSION_STATE = 0
      if self.HEARTBEAT_BSD_CURRENT_ACTION is None:
        self.HEARTBEAT_BSD_CURRENT_ACTION = 0
      if self.HEARTBEAT_BSD_TOTAL_ACTIONS is None:
        self.HEARTBEAT_BSD_TOTAL_ACTIONS = 0
      if self.HEARTBEAT_GPS_SATS is None:
        self.HEARTBEAT_GPS_SATS = 0
      if self.HEARTBEAT_NAV_INITIALIZED is None:
        self.HEARTBEAT_NAV_INITIALIZED = 0
      if self.HEARTBEAT_ROLL is None:
        self.HEARTBEAT_ROLL = 0.
      if self.HEARTBEAT_PITCH is None:
        self.HEARTBEAT_PITCH = 0.
      if self.HEARTBEAT_YAW is None:
        self.HEARTBEAT_YAW = 0.
      if self.HEARTBEAT_WX is None:
        self.HEARTBEAT_WX = 0.
      if self.HEARTBEAT_WY is None:
        self.HEARTBEAT_WY = 0.
      if self.HEARTBEAT_WZ is None:
        self.HEARTBEAT_WZ = 0.
      if self.HEARTBEAT_AX is None:
        self.HEARTBEAT_AX = 0.
      if self.HEARTBEAT_AY is None:
        self.HEARTBEAT_AY = 0.
      if self.HEARTBEAT_AZ is None:
        self.HEARTBEAT_AZ = 0.
      if self.HEARTBEAT_VN is None:
        self.HEARTBEAT_VN = 0.
      if self.HEARTBEAT_VE is None:
        self.HEARTBEAT_VE = 0.
      if self.HEARTBEAT_VD is None:
        self.HEARTBEAT_VD = 0.
      if self.HEARTBEAT_DEPTH is None:
        self.HEARTBEAT_DEPTH = 0.
      if self.HEARTBEAT_HEIGHT is None:
        self.HEARTBEAT_HEIGHT = 0.
      if self.HEARTBEAT_RPM is None:
        self.HEARTBEAT_RPM = 0.
      if self.HEARTBEAT_VOLTAGE is None:
        self.HEARTBEAT_VOLTAGE = 0.
      if self.HEARTBEAT_FSD_ACTION_PERCENT is None:
        self.HEARTBEAT_FSD_ACTION_PERCENT = 0.
      if self.HEARTBEAT_BSD_ACTION_PERCENT is None:
        self.HEARTBEAT_BSD_ACTION_PERCENT = 0.
      if self.HEARTBEAT_GPS_LAT is None:
        self.HEARTBEAT_GPS_LAT = 0.
      if self.HEARTBEAT_GPS_LON is None:
        self.HEARTBEAT_GPS_LON = 0.
      if self.HEARTBEAT_GPS_ALT is None:
        self.HEARTBEAT_GPS_ALT = 0.
      if self.HEARTBEAT_NAV_LAT is None:
        self.HEARTBEAT_NAV_LAT = 0.
      if self.HEARTBEAT_NAV_LON is None:
        self.HEARTBEAT_NAV_LON = 0.
      if self.HEARTBEAT_NAV_ALT is None:
        self.HEARTBEAT_NAV_ALT = 0.
      if self.HEARTBEAT_NAV_YAW_STD is None:
        self.HEARTBEAT_NAV_YAW_STD = 0.
      if self.HEARTBEAT_NAV_AVG_POS_ERR is None:
        self.HEARTBEAT_NAV_AVG_POS_ERR = 0.
    else:
      self.HEARTBEAT_STATUS = 0
      self.HEARTBEAT_UMODEM_SYNC = 0
      self.HEARTBEAT_IRIDIUM_STR = 0
      self.HEARTBEAT_MISSION_MODE = 0
      self.HEARTBEAT_FSD_MISSION_STATE = 0
      self.HEARTBEAT_FSD_CURRENT_ACTION = 0
      self.HEARTBEAT_FSD_TOTAL_ACTIONS = 0
      self.HEARTBEAT_BSD_MISSION_STATE = 0
      self.HEARTBEAT_BSD_CURRENT_ACTION = 0
      self.HEARTBEAT_BSD_TOTAL_ACTIONS = 0
      self.HEARTBEAT_GPS_SATS = 0
      self.HEARTBEAT_NAV_INITIALIZED = 0
      self.HEARTBEAT_ROLL = 0.
      self.HEARTBEAT_PITCH = 0.
      self.HEARTBEAT_YAW = 0.
      self.HEARTBEAT_WX = 0.
      self.HEARTBEAT_WY = 0.
      self.HEARTBEAT_WZ = 0.
      self.HEARTBEAT_AX = 0.
      self.HEARTBEAT_AY = 0.
      self.HEARTBEAT_AZ = 0.
      self.HEARTBEAT_VN = 0.
      self.HEARTBEAT_VE = 0.
      self.HEARTBEAT_VD = 0.
      self.HEARTBEAT_DEPTH = 0.
      self.HEARTBEAT_HEIGHT = 0.
      self.HEARTBEAT_RPM = 0.
      self.HEARTBEAT_VOLTAGE = 0.
      self.HEARTBEAT_FSD_ACTION_PERCENT = 0.
      self.HEARTBEAT_BSD_ACTION_PERCENT = 0.
      self.HEARTBEAT_GPS_LAT = 0.
      self.HEARTBEAT_GPS_LON = 0.
      self.HEARTBEAT_GPS_ALT = 0.
      self.HEARTBEAT_NAV_LAT = 0.
      self.HEARTBEAT_NAV_LON = 0.
      self.HEARTBEAT_NAV_ALT = 0.
      self.HEARTBEAT_NAV_YAW_STD = 0.
      self.HEARTBEAT_NAV_AVG_POS_ERR = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12B26d().pack(_x.HEARTBEAT_STATUS, _x.HEARTBEAT_UMODEM_SYNC, _x.HEARTBEAT_IRIDIUM_STR, _x.HEARTBEAT_MISSION_MODE, _x.HEARTBEAT_FSD_MISSION_STATE, _x.HEARTBEAT_FSD_CURRENT_ACTION, _x.HEARTBEAT_FSD_TOTAL_ACTIONS, _x.HEARTBEAT_BSD_MISSION_STATE, _x.HEARTBEAT_BSD_CURRENT_ACTION, _x.HEARTBEAT_BSD_TOTAL_ACTIONS, _x.HEARTBEAT_GPS_SATS, _x.HEARTBEAT_NAV_INITIALIZED, _x.HEARTBEAT_ROLL, _x.HEARTBEAT_PITCH, _x.HEARTBEAT_YAW, _x.HEARTBEAT_WX, _x.HEARTBEAT_WY, _x.HEARTBEAT_WZ, _x.HEARTBEAT_AX, _x.HEARTBEAT_AY, _x.HEARTBEAT_AZ, _x.HEARTBEAT_VN, _x.HEARTBEAT_VE, _x.HEARTBEAT_VD, _x.HEARTBEAT_DEPTH, _x.HEARTBEAT_HEIGHT, _x.HEARTBEAT_RPM, _x.HEARTBEAT_VOLTAGE, _x.HEARTBEAT_FSD_ACTION_PERCENT, _x.HEARTBEAT_BSD_ACTION_PERCENT, _x.HEARTBEAT_GPS_LAT, _x.HEARTBEAT_GPS_LON, _x.HEARTBEAT_GPS_ALT, _x.HEARTBEAT_NAV_LAT, _x.HEARTBEAT_NAV_LON, _x.HEARTBEAT_NAV_ALT, _x.HEARTBEAT_NAV_YAW_STD, _x.HEARTBEAT_NAV_AVG_POS_ERR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 220
      (_x.HEARTBEAT_STATUS, _x.HEARTBEAT_UMODEM_SYNC, _x.HEARTBEAT_IRIDIUM_STR, _x.HEARTBEAT_MISSION_MODE, _x.HEARTBEAT_FSD_MISSION_STATE, _x.HEARTBEAT_FSD_CURRENT_ACTION, _x.HEARTBEAT_FSD_TOTAL_ACTIONS, _x.HEARTBEAT_BSD_MISSION_STATE, _x.HEARTBEAT_BSD_CURRENT_ACTION, _x.HEARTBEAT_BSD_TOTAL_ACTIONS, _x.HEARTBEAT_GPS_SATS, _x.HEARTBEAT_NAV_INITIALIZED, _x.HEARTBEAT_ROLL, _x.HEARTBEAT_PITCH, _x.HEARTBEAT_YAW, _x.HEARTBEAT_WX, _x.HEARTBEAT_WY, _x.HEARTBEAT_WZ, _x.HEARTBEAT_AX, _x.HEARTBEAT_AY, _x.HEARTBEAT_AZ, _x.HEARTBEAT_VN, _x.HEARTBEAT_VE, _x.HEARTBEAT_VD, _x.HEARTBEAT_DEPTH, _x.HEARTBEAT_HEIGHT, _x.HEARTBEAT_RPM, _x.HEARTBEAT_VOLTAGE, _x.HEARTBEAT_FSD_ACTION_PERCENT, _x.HEARTBEAT_BSD_ACTION_PERCENT, _x.HEARTBEAT_GPS_LAT, _x.HEARTBEAT_GPS_LON, _x.HEARTBEAT_GPS_ALT, _x.HEARTBEAT_NAV_LAT, _x.HEARTBEAT_NAV_LON, _x.HEARTBEAT_NAV_ALT, _x.HEARTBEAT_NAV_YAW_STD, _x.HEARTBEAT_NAV_AVG_POS_ERR,) = _get_struct_12B26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12B26d().pack(_x.HEARTBEAT_STATUS, _x.HEARTBEAT_UMODEM_SYNC, _x.HEARTBEAT_IRIDIUM_STR, _x.HEARTBEAT_MISSION_MODE, _x.HEARTBEAT_FSD_MISSION_STATE, _x.HEARTBEAT_FSD_CURRENT_ACTION, _x.HEARTBEAT_FSD_TOTAL_ACTIONS, _x.HEARTBEAT_BSD_MISSION_STATE, _x.HEARTBEAT_BSD_CURRENT_ACTION, _x.HEARTBEAT_BSD_TOTAL_ACTIONS, _x.HEARTBEAT_GPS_SATS, _x.HEARTBEAT_NAV_INITIALIZED, _x.HEARTBEAT_ROLL, _x.HEARTBEAT_PITCH, _x.HEARTBEAT_YAW, _x.HEARTBEAT_WX, _x.HEARTBEAT_WY, _x.HEARTBEAT_WZ, _x.HEARTBEAT_AX, _x.HEARTBEAT_AY, _x.HEARTBEAT_AZ, _x.HEARTBEAT_VN, _x.HEARTBEAT_VE, _x.HEARTBEAT_VD, _x.HEARTBEAT_DEPTH, _x.HEARTBEAT_HEIGHT, _x.HEARTBEAT_RPM, _x.HEARTBEAT_VOLTAGE, _x.HEARTBEAT_FSD_ACTION_PERCENT, _x.HEARTBEAT_BSD_ACTION_PERCENT, _x.HEARTBEAT_GPS_LAT, _x.HEARTBEAT_GPS_LON, _x.HEARTBEAT_GPS_ALT, _x.HEARTBEAT_NAV_LAT, _x.HEARTBEAT_NAV_LON, _x.HEARTBEAT_NAV_ALT, _x.HEARTBEAT_NAV_YAW_STD, _x.HEARTBEAT_NAV_AVG_POS_ERR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 220
      (_x.HEARTBEAT_STATUS, _x.HEARTBEAT_UMODEM_SYNC, _x.HEARTBEAT_IRIDIUM_STR, _x.HEARTBEAT_MISSION_MODE, _x.HEARTBEAT_FSD_MISSION_STATE, _x.HEARTBEAT_FSD_CURRENT_ACTION, _x.HEARTBEAT_FSD_TOTAL_ACTIONS, _x.HEARTBEAT_BSD_MISSION_STATE, _x.HEARTBEAT_BSD_CURRENT_ACTION, _x.HEARTBEAT_BSD_TOTAL_ACTIONS, _x.HEARTBEAT_GPS_SATS, _x.HEARTBEAT_NAV_INITIALIZED, _x.HEARTBEAT_ROLL, _x.HEARTBEAT_PITCH, _x.HEARTBEAT_YAW, _x.HEARTBEAT_WX, _x.HEARTBEAT_WY, _x.HEARTBEAT_WZ, _x.HEARTBEAT_AX, _x.HEARTBEAT_AY, _x.HEARTBEAT_AZ, _x.HEARTBEAT_VN, _x.HEARTBEAT_VE, _x.HEARTBEAT_VD, _x.HEARTBEAT_DEPTH, _x.HEARTBEAT_HEIGHT, _x.HEARTBEAT_RPM, _x.HEARTBEAT_VOLTAGE, _x.HEARTBEAT_FSD_ACTION_PERCENT, _x.HEARTBEAT_BSD_ACTION_PERCENT, _x.HEARTBEAT_GPS_LAT, _x.HEARTBEAT_GPS_LON, _x.HEARTBEAT_GPS_ALT, _x.HEARTBEAT_NAV_LAT, _x.HEARTBEAT_NAV_LON, _x.HEARTBEAT_NAV_ALT, _x.HEARTBEAT_NAV_YAW_STD, _x.HEARTBEAT_NAV_AVG_POS_ERR,) = _get_struct_12B26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12B26d = None
def _get_struct_12B26d():
    global _struct_12B26d
    if _struct_12B26d is None:
        _struct_12B26d = struct.Struct("<12B26d")
    return _struct_12B26d
