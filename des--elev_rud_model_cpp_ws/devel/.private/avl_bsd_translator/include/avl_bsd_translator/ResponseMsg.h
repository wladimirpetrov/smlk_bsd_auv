// Generated by gencpp from file avl_bsd_translator/ResponseMsg.msg
// DO NOT EDIT!


#ifndef AVL_BSD_TRANSLATOR_MESSAGE_RESPONSEMSG_H
#define AVL_BSD_TRANSLATOR_MESSAGE_RESPONSEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace avl_bsd_translator
{
template <class ContainerAllocator>
struct ResponseMsg_
{
  typedef ResponseMsg_<ContainerAllocator> Type;

  ResponseMsg_()
    : DESC(0)
    , NAME()
    , SOURCE(0)
    , RESULT(false)
    , DATA()  {
    }
  ResponseMsg_(const ContainerAllocator& _alloc)
    : DESC(0)
    , NAME(_alloc)
    , SOURCE(0)
    , RESULT(false)
    , DATA(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _DESC_type;
  _DESC_type DESC;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _NAME_type;
  _NAME_type NAME;

   typedef uint64_t _SOURCE_type;
  _SOURCE_type SOURCE;

   typedef uint8_t _RESULT_type;
  _RESULT_type RESULT;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _DATA_type;
  _DATA_type DATA;





  typedef boost::shared_ptr< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ResponseMsg_

typedef ::avl_bsd_translator::ResponseMsg_<std::allocator<void> > ResponseMsg;

typedef boost::shared_ptr< ::avl_bsd_translator::ResponseMsg > ResponseMsgPtr;
typedef boost::shared_ptr< ::avl_bsd_translator::ResponseMsg const> ResponseMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator2> & rhs)
{
  return lhs.DESC == rhs.DESC &&
    lhs.NAME == rhs.NAME &&
    lhs.SOURCE == rhs.SOURCE &&
    lhs.RESULT == rhs.RESULT &&
    lhs.DATA == rhs.DATA;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace avl_bsd_translator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6a85287137e7f8b62777ed3e0afe18e";
  }

  static const char* value(const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6a85287137e7f8bULL;
  static const uint64_t static_value2 = 0x62777ed3e0afe18eULL;
};

template<class ContainerAllocator>
struct DataType< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "avl_bsd_translator/ResponseMsg";
  }

  static const char* value(const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#===============================================================================\n"
"# Autonomous Vehicle Library Backseat Driver\n"
"#\n"
"# Description: Defines a message that contains a response from the vehicle\n"
"#              computer\n"
"#===============================================================================\n"
"\n"
"uint8 DESC\n"
"string NAME\n"
"uint64 SOURCE\n"
"bool RESULT\n"
"string DATA\n"
;
  }

  static const char* value(const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DESC);
      stream.next(m.NAME);
      stream.next(m.SOURCE);
      stream.next(m.RESULT);
      stream.next(m.DATA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResponseMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::avl_bsd_translator::ResponseMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::avl_bsd_translator::ResponseMsg_<ContainerAllocator>& v)
  {
    s << indent << "DESC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DESC);
    s << indent << "NAME: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.NAME);
    s << indent << "SOURCE: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.SOURCE);
    s << indent << "RESULT: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RESULT);
    s << indent << "DATA: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.DATA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AVL_BSD_TRANSLATOR_MESSAGE_RESPONSEMSG_H
