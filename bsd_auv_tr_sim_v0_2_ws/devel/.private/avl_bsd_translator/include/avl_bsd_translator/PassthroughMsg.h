// Generated by gencpp from file avl_bsd_translator/PassthroughMsg.msg
// DO NOT EDIT!


#ifndef AVL_BSD_TRANSLATOR_MESSAGE_PASSTHROUGHMSG_H
#define AVL_BSD_TRANSLATOR_MESSAGE_PASSTHROUGHMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace avl_bsd_translator
{
template <class ContainerAllocator>
struct PassthroughMsg_
{
  typedef PassthroughMsg_<ContainerAllocator> Type;

  PassthroughMsg_()
    : ORIGIN_ID(0)
    , TARGET_ID(0)
    , CHANNEL(0)
    , INTERFACE(0)
    , DATA()  {
    }
  PassthroughMsg_(const ContainerAllocator& _alloc)
    : ORIGIN_ID(0)
    , TARGET_ID(0)
    , CHANNEL(0)
    , INTERFACE(0)
    , DATA(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ORIGIN_ID_type;
  _ORIGIN_ID_type ORIGIN_ID;

   typedef uint8_t _TARGET_ID_type;
  _TARGET_ID_type TARGET_ID;

   typedef uint8_t _CHANNEL_type;
  _CHANNEL_type CHANNEL;

   typedef uint8_t _INTERFACE_type;
  _INTERFACE_type INTERFACE;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _DATA_type;
  _DATA_type DATA;





  typedef boost::shared_ptr< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PassthroughMsg_

typedef ::avl_bsd_translator::PassthroughMsg_<std::allocator<void> > PassthroughMsg;

typedef boost::shared_ptr< ::avl_bsd_translator::PassthroughMsg > PassthroughMsgPtr;
typedef boost::shared_ptr< ::avl_bsd_translator::PassthroughMsg const> PassthroughMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator2> & rhs)
{
  return lhs.ORIGIN_ID == rhs.ORIGIN_ID &&
    lhs.TARGET_ID == rhs.TARGET_ID &&
    lhs.CHANNEL == rhs.CHANNEL &&
    lhs.INTERFACE == rhs.INTERFACE &&
    lhs.DATA == rhs.DATA;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator1> & lhs, const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace avl_bsd_translator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68cb8a05d5ebb8373e58b01f1c0af317";
  }

  static const char* value(const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68cb8a05d5ebb837ULL;
  static const uint64_t static_value2 = 0x3e58b01f1c0af317ULL;
};

template<class ContainerAllocator>
struct DataType< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "avl_bsd_translator/PassthroughMsg";
  }

  static const char* value(const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#===============================================================================\n"
"# Autonomous Vehicle Library Backseat Driver\n"
"#\n"
"# Description: Defines a message that contains a passthrough message\n"
"#===============================================================================\n"
"\n"
"uint8 ORIGIN_ID\n"
"uint8 TARGET_ID\n"
"uint8 CHANNEL\n"
"uint8 INTERFACE\n"
"string DATA\n"
;
  }

  static const char* value(const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ORIGIN_ID);
      stream.next(m.TARGET_ID);
      stream.next(m.CHANNEL);
      stream.next(m.INTERFACE);
      stream.next(m.DATA);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PassthroughMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::avl_bsd_translator::PassthroughMsg_<ContainerAllocator>& v)
  {
    s << indent << "ORIGIN_ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ORIGIN_ID);
    s << indent << "TARGET_ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TARGET_ID);
    s << indent << "CHANNEL: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CHANNEL);
    s << indent << "INTERFACE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INTERFACE);
    s << indent << "DATA: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.DATA);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AVL_BSD_TRANSLATOR_MESSAGE_PASSTHROUGHMSG_H
